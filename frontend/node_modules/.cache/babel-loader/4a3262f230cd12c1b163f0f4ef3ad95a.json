{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\35192\\\\OneDrive\\\\Desktop\\\\feup-sinf\\\\src\\\\components\\\\GenericTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useMemo } from 'react';\nimport useFullPageLoader from '../hooks/FullPageLoader';\nimport PaginationComponent from './Pagination';\nimport Search from './Search';\nimport TableHeader from './TableHeader';\nimport '../styles/Table.css';\n/**\n *  example of usage\n *   <GenericTable\n      title = \"Table title\"\n      numberItemsPerPage = {4}\n      headers = {[\n        { name: \"No#\", field: \"id\", sortable: false },\n        { name: \"Name\", field: \"name\", sortable: true },\n        { name: \"Email\", field: \"email\", sortable: true },\n        { name: \"Comment\", field: \"body\", sortable: false }\n        ]}\n      containerStyle = {{width: '100%'}}\n      themeColor = \"orange\"\n    />\n */\n\nconst GenericTable = ({\n  title,\n  numberItemsPerPage,\n  headers,\n  containerStyle,\n  themeColor\n}) => {\n  _s();\n\n  const [loader, showLoader, hideLoader] = useFullPageLoader();\n  const [totalItems, setTotalItems] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [search, setSearch] = useState('');\n  const [sorting, setSorting] = useState({\n    field: '',\n    order: ''\n  });\n  const ITEMS_PER_PAGE = numberItemsPerPage;\n  /* this is going to be used in the feature when doing the api call */\n\n  const [comments, setComments] = useState([]);\n  /* insert the information fetched in the api (now using a dummy api) */\n\n  useEffect(() => {\n    const getData = () => {\n      showLoader();\n      fetch('https://jsonplaceholder.typicode.com/comments').then(response => response.json()).then(json => {\n        hideLoader();\n        setComments(json); //console.log(json);\n      });\n    };\n\n    getData();\n  }, []);\n  /*to able to sort the data we are going to retrieve */\n\n  const commentsData = useMemo(() => {\n    let computedComments = comments;\n\n    if (search) {\n      computedComments = computedComments.filter(comment => comment.name.toLowerCase().includes(search.toLowerCase()) || comment.email.toLowerCase().includes(search.toLowerCase()));\n    }\n\n    setTotalItems(computedComments.length); //Sorting comments\n\n    if (sorting.field) {\n      const reversed = sorting.order === 'asc' ? 1 : -1;\n      computedComments = computedComments.sort((a, b) => reversed * a[sorting.field].localeCompare(b[sorting.field]));\n    } //Current Page slice\n\n\n    return computedComments.slice((currentPage - 1) * ITEMS_PER_PAGE, (currentPage - 1) * ITEMS_PER_PAGE + ITEMS_PER_PAGE);\n  }, [comments, currentPage, search, sorting]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"table\",\n      style: containerStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"header_info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"table-title\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Search, {\n          onSearch: value => {\n            setSearch(value);\n            setCurrentPage(1);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(TableHeader, {\n          color: themeColor,\n          headers: headers,\n          onSorting: (field, order) => setSorting({\n            field,\n            order\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: commentsData.map(comment => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"row\",\n              children: comment.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: comment.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: comment.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this)]\n          }, comment.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PaginationComponent, {\n        color: themeColor,\n        total: totalItems,\n        itemsPerPage: ITEMS_PER_PAGE,\n        currentPage: currentPage,\n        onPageChange: page => setCurrentPage(page)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), loader]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(GenericTable, \"Dihn5XQ5x9Jo9lU5IRiRNB9rw6g=\", false, function () {\n  return [useFullPageLoader];\n});\n\n_c = GenericTable;\nexport default GenericTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenericTable\");","map":{"version":3,"sources":["C:/Users/35192/OneDrive/Desktop/feup-sinf/src/components/GenericTable.js"],"names":["React","useEffect","useState","useMemo","useFullPageLoader","PaginationComponent","Search","TableHeader","GenericTable","title","numberItemsPerPage","headers","containerStyle","themeColor","loader","showLoader","hideLoader","totalItems","setTotalItems","currentPage","setCurrentPage","search","setSearch","sorting","setSorting","field","order","ITEMS_PER_PAGE","comments","setComments","getData","fetch","then","response","json","commentsData","computedComments","filter","comment","name","toLowerCase","includes","email","length","reversed","sort","a","b","localeCompare","slice","value","map","id","page"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useMemo } from 'react';\nimport useFullPageLoader from '../hooks/FullPageLoader';\nimport PaginationComponent from './Pagination';\nimport Search from './Search';\nimport TableHeader from './TableHeader';\nimport '../styles/Table.css';\n\n/**\n *  example of usage\n *   <GenericTable\n      title = \"Table title\"\n      numberItemsPerPage = {4}\n      headers = {[\n        { name: \"No#\", field: \"id\", sortable: false },\n        { name: \"Name\", field: \"name\", sortable: true },\n        { name: \"Email\", field: \"email\", sortable: true },\n        { name: \"Comment\", field: \"body\", sortable: false }\n        ]}\n      containerStyle = {{width: '100%'}}\n      themeColor = \"orange\"\n    />\n */\nconst GenericTable = ({\n  title,\n  numberItemsPerPage,\n  headers,\n  containerStyle,\n  themeColor,\n}) => {\n  const [loader, showLoader, hideLoader] = useFullPageLoader();\n  const [totalItems, setTotalItems] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [search, setSearch] = useState('');\n  const [sorting, setSorting] = useState({ field: '', order: '' });\n\n  const ITEMS_PER_PAGE = numberItemsPerPage;\n\n  /* this is going to be used in the feature when doing the api call */\n  const [comments, setComments] = useState([]);\n  /* insert the information fetched in the api (now using a dummy api) */\n  useEffect(() => {\n    const getData = () => {\n      showLoader();\n\n      fetch('https://jsonplaceholder.typicode.com/comments')\n        .then((response) => response.json())\n        .then((json) => {\n          hideLoader();\n          setComments(json);\n          //console.log(json);\n        });\n    };\n\n    getData();\n  }, []);\n\n  /*to able to sort the data we are going to retrieve */\n  const commentsData = useMemo(() => {\n    let computedComments = comments;\n\n    if (search) {\n      computedComments = computedComments.filter(\n        (comment) =>\n          comment.name.toLowerCase().includes(search.toLowerCase()) ||\n          comment.email.toLowerCase().includes(search.toLowerCase())\n      );\n    }\n\n    setTotalItems(computedComments.length);\n\n    //Sorting comments\n    if (sorting.field) {\n      const reversed = sorting.order === 'asc' ? 1 : -1;\n      computedComments = computedComments.sort(\n        (a, b) => reversed * a[sorting.field].localeCompare(b[sorting.field])\n      );\n    }\n\n    //Current Page slice\n    return computedComments.slice(\n      (currentPage - 1) * ITEMS_PER_PAGE,\n      (currentPage - 1) * ITEMS_PER_PAGE + ITEMS_PER_PAGE\n    );\n  }, [comments, currentPage, search, sorting]);\n\n  return (\n    <>\n      <section className=\"table\" style={containerStyle}>\n        <header className=\"header_info\">\n          <h3 className=\"table-title\">{title}</h3>\n          <Search\n            onSearch={(value) => {\n              setSearch(value);\n              setCurrentPage(1);\n            }}\n          />\n        </header>\n\n        <table className=\"content\">\n          <TableHeader\n            color={themeColor}\n            headers={headers}\n            onSorting={(field, order) => setSorting({ field, order })}\n          />\n          <tbody>\n            {commentsData.map((comment) => (\n              <tr key={comment.id}>\n                <th scope=\"row\">{comment.id}</th>\n                <td>{comment.email}</td>\n                <td>{comment.email}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n\n        <PaginationComponent\n          color={themeColor}\n          total={totalItems}\n          itemsPerPage={ITEMS_PER_PAGE}\n          currentPage={currentPage}\n          onPageChange={(page) => setCurrentPage(page)}\n        />\n\n        {loader}\n      </section>\n    </>\n  );\n};\n\nexport default GenericTable;\n"]},"metadata":{},"sourceType":"module"}