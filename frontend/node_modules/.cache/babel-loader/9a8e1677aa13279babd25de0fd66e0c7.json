{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\35192\\\\OneDrive\\\\Desktop\\\\feup-sinf\\\\src\\\\components\\\\GenericTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useMemo } from \"react\";\nimport useFullPageLoader from \"../hooks/FullPageLoader\";\nimport PaginationComponent from \"./Pagination\";\nimport Search from \"./Search\";\nimport TableHeader from \"./TableHeader\";\nimport '../styles/Table.css';\n\nconst GenericTable = ({\n  title,\n  numberItemsPerPage,\n  headers,\n  containerStyle\n}) => {\n  _s();\n\n  const [loader, showLoader, hideLoader] = useFullPageLoader();\n  const [totalItems, setTotalItems] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [search, setSearch] = useState(\"\");\n  const [sorting, setSorting] = useState({\n    field: \"\",\n    order: \"\"\n  });\n  const ITEMS_PER_PAGE = numberItemsPerPage;\n  /* this is going to be used in the feature when doing the api call */\n\n  const [comments, setComments] = useState([]);\n  /* insert the information fetched in the api (now using a dummy api) */\n\n  useEffect(() => {\n    const getData = () => {\n      showLoader();\n      fetch(\"https://jsonplaceholder.typicode.com/comments\").then(response => response.json()).then(json => {\n        hideLoader();\n        setComments(json); //console.log(json);\n      });\n    };\n\n    getData();\n  }, []);\n  /*to able to sort the data we are going to retrieve */\n\n  const commentsData = useMemo(() => {\n    let computedComments = comments;\n\n    if (search) {\n      computedComments = computedComments.filter(comment => comment.name.toLowerCase().includes(search.toLowerCase()) || comment.email.toLowerCase().includes(search.toLowerCase()));\n    }\n\n    setTotalItems(computedComments.length); //Sorting comments\n\n    if (sorting.field) {\n      const reversed = sorting.order === \"asc\" ? 1 : -1;\n      computedComments = computedComments.sort((a, b) => reversed * a[sorting.field].localeCompare(b[sorting.field]));\n    } //Current Page slice\n\n\n    return computedComments.slice((currentPage - 1) * ITEMS_PER_PAGE, (currentPage - 1) * ITEMS_PER_PAGE + ITEMS_PER_PAGE);\n  }, [comments, currentPage, search, sorting]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      style: containerStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Search, {\n        onSearch: value => {\n          setSearch(value);\n          setCurrentPage(1);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(TableHeader, {\n          headers: headers,\n          onSorting: (field, order) => setSorting({\n            field,\n            order\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: commentsData.map(comment => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"row\",\n              children: comment.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: comment.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: comment.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: comment.body\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 29\n            }, this)]\n          }, comment.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PaginationComponent, {\n        total: totalItems,\n        itemsPerPage: ITEMS_PER_PAGE,\n        currentPage: currentPage,\n        onPageChange: page => setCurrentPage(page)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }, this), loader]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(GenericTable, \"dVe3ugohWc7VWWbzr4T7VzvFHqw=\", false, function () {\n  return [useFullPageLoader];\n});\n\n_c = GenericTable;\nexport default GenericTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenericTable\");","map":{"version":3,"sources":["C:/Users/35192/OneDrive/Desktop/feup-sinf/src/components/GenericTable.js"],"names":["React","useEffect","useState","useMemo","useFullPageLoader","PaginationComponent","Search","TableHeader","GenericTable","title","numberItemsPerPage","headers","containerStyle","loader","showLoader","hideLoader","totalItems","setTotalItems","currentPage","setCurrentPage","search","setSearch","sorting","setSorting","field","order","ITEMS_PER_PAGE","comments","setComments","getData","fetch","then","response","json","commentsData","computedComments","filter","comment","name","toLowerCase","includes","email","length","reversed","sort","a","b","localeCompare","slice","value","map","id","body","page"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useMemo } from \"react\";\nimport useFullPageLoader from \"../hooks/FullPageLoader\";\nimport PaginationComponent from \"./Pagination\";\nimport Search from \"./Search\";\nimport TableHeader from \"./TableHeader\";\nimport '../styles/Table.css';\n\n\n\nconst GenericTable = ({title, numberItemsPerPage, headers, containerStyle}) => {\n\n\n\n    const [loader, showLoader, hideLoader] = useFullPageLoader();\n    const [totalItems, setTotalItems] = useState(0);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [search, setSearch] = useState(\"\");\n    const [sorting, setSorting] = useState({ field: \"\", order: \"\" });\n\n    const ITEMS_PER_PAGE = numberItemsPerPage;\n\n    /* this is going to be used in the feature when doing the api call */\n    const [comments, setComments] = useState([]);\n    /* insert the information fetched in the api (now using a dummy api) */\n    useEffect(() => {\n        const getData = () => {\n            showLoader();\n\n            fetch(\"https://jsonplaceholder.typicode.com/comments\")\n                .then(response => response.json())\n                .then(json => {\n                    hideLoader();\n                    setComments(json);\n                    //console.log(json);\n                });\n        };\n\n        getData();\n    }, []);\n\n    /*to able to sort the data we are going to retrieve */\n    const commentsData = useMemo(() => {\n        let computedComments = comments;\n\n        if (search) {\n            computedComments = computedComments.filter(\n                comment =>\n                    comment.name.toLowerCase().includes(search.toLowerCase()) ||\n                    comment.email.toLowerCase().includes(search.toLowerCase())\n            );\n        }\n\n        setTotalItems(computedComments.length);\n\n        //Sorting comments\n        if (sorting.field) {\n            const reversed = sorting.order === \"asc\" ? 1 : -1;\n            computedComments = computedComments.sort(\n                (a, b) =>\n                    reversed * a[sorting.field].localeCompare(b[sorting.field])\n            );\n        }\n\n        //Current Page slice\n        return computedComments.slice(\n            (currentPage - 1) * ITEMS_PER_PAGE,\n            (currentPage - 1) * ITEMS_PER_PAGE + ITEMS_PER_PAGE\n        );\n    }, [comments, currentPage, search, sorting]);\n\n    return (\n        \n        <>\n\n        <section style = {containerStyle}>\n            \n            <h3>{title}</h3>\n            <Search\n                onSearch={value => {\n                    setSearch(value);\n                    setCurrentPage(1);\n                }}\n            />\n                \n            <table>\n                <TableHeader\n                    headers={headers}\n                    onSorting={(field, order) =>\n                        setSorting({ field, order })\n                    }\n                />\n                <tbody>\n                    {commentsData.map(comment => (\n                        <tr key={comment.id}>\n                            <th scope=\"row\">\n                                {comment.id}\n                            </th>\n                            <td>{comment.name}</td>\n                            <td>{comment.email}</td>\n                            <td>{comment.body}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>               \n            <PaginationComponent\n                total={totalItems}\n                itemsPerPage={ITEMS_PER_PAGE}\n                currentPage={currentPage}\n                onPageChange={page => setCurrentPage(page) }\n            />\n\n            {loader}\n        </section>\n        </>\n     \n\n    );\n\n};\n\nexport default GenericTable;"]},"metadata":{},"sourceType":"module"}