{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\35192\\\\OneDrive\\\\Desktop\\\\feup-sinf\\\\src\\\\components\\\\Pagination.js\",\n    _s = $RefreshSig$();\n\nimport { useMemo, useEffect, useState } from 'react';\nimport Pagination from 'react-bootstrap/Pagination';\nimport '../styles/Pagination.css';\n\nconst PaginationComponent = ({\n  total = 0,\n  itemsPerPage = 10,\n  currentPage = 1,\n  onPageChange\n}) => {\n  _s();\n\n  const [totalPages, setTotalPages] = useState(0); //    let  [pages, setPages] = useState([]);\n\n  const set = new Set();\n  const pages = [];\n  useEffect(() => {\n    if (total > 0 && itemsPerPage > 0) setTotalPages(Math.ceil(total / itemsPerPage));\n  }, [total, itemsPerPage]);\n  /*\n    useEffect(() => {\n        set.clear();\n        const offset = 5;\n            set.add(1);\n            set.add(totalPages);\n    \n            for(let i = 0 ; i < offset; i++) {\n                set.add(Math.min(1 + i, totalPages));\n                set.add(Math.max(currentPage - i, 1));\n                set.add(Math.min(currentPage + i , totalPages));\n                set.add(Math.max(totalPages - i, 1));\n            }\n    \n    \n            pages = Array.from(set).sort((a,b) => a-b);\n            setPages(pages);\n     }, [currentPage, totalPages]);*/\n\n  const paginationItems = useMemo(() => {\n    for (let i = 0; i < totalPages; i++) {\n      pages.push( /*#__PURE__*/_jsxDEV(Pagination.Item, {\n        active: i === currentPage,\n        onClick: () => onPageChange(i),\n        children: i\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this));\n    }\n\n    return pages;\n  }, [totalPages, currentPage]);\n  if (totalPages === 0) return null;\n  return /*#__PURE__*/_jsxDEV(Pagination, {\n    children: [/*#__PURE__*/_jsxDEV(Pagination.Prev, {\n      onClick: () => {\n        if (currentPage > 1) onPageChange(currentPage - 1);\n      },\n      disabled: currentPage === 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), paginationItems, /*#__PURE__*/_jsxDEV(Pagination.Next, {\n      onClick: () => {\n        if (currentPage < totalPages) onPageChange(currentPage + 1);\n      },\n      disabled: currentPage === totalPages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PaginationComponent, \"MKlQ5ncFBmedXV2GyHherFj+chg=\");\n\n_c = PaginationComponent;\nexport default PaginationComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaginationComponent\");","map":{"version":3,"sources":["C:/Users/35192/OneDrive/Desktop/feup-sinf/src/components/Pagination.js"],"names":["useMemo","useEffect","useState","Pagination","PaginationComponent","total","itemsPerPage","currentPage","onPageChange","totalPages","setTotalPages","set","Set","pages","Math","ceil","paginationItems","i","push"],"mappings":";;;;;AAAA,SAASA,OAAT,EAAkBC,SAAlB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAO,0BAAP;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAC3BC,EAAAA,KAAK,GAAG,CADmB;AAE3BC,EAAAA,YAAY,GAAG,EAFY;AAG3BC,EAAAA,WAAW,GAAG,CAHa;AAI3BC,EAAAA;AAJ2B,CAAD,KAKtB;AAAA;;AACJ,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,CAAD,CAA5C,CADI,CAEJ;;AACA,QAAMS,GAAG,GAAG,IAAIC,GAAJ,EAAZ;AACA,QAAMC,KAAK,GAAG,EAAd;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,KAAK,GAAG,CAAR,IAAaC,YAAY,GAAG,CAAhC,EACEI,aAAa,CAACI,IAAI,CAACC,IAAL,CAAUV,KAAK,GAAGC,YAAlB,CAAD,CAAb;AACH,GAHQ,EAGN,CAACD,KAAD,EAAQC,YAAR,CAHM,CAAT;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGE,QAAMU,eAAe,GAAGhB,OAAO,CAAC,MAAM;AACpC,SAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,UAApB,EAAgCQ,CAAC,EAAjC,EAAqC;AACnCJ,MAAAA,KAAK,CAACK,IAAN,eACE,QAAC,UAAD,CAAY,IAAZ;AAEE,QAAA,MAAM,EAAED,CAAC,KAAKV,WAFhB;AAGE,QAAA,OAAO,EAAE,MAAMC,YAAY,CAACS,CAAD,CAH7B;AAAA,kBAKGA;AALH,SACOA,CADP;AAAA;AAAA;AAAA;AAAA,cADF;AASD;;AAED,WAAOJ,KAAP;AACD,GAd8B,EAc5B,CAACJ,UAAD,EAAaF,WAAb,CAd4B,CAA/B;AAgBA,MAAIE,UAAU,KAAK,CAAnB,EAAsB,OAAO,IAAP;AAEtB,sBACE,QAAC,UAAD;AAAA,4BACE,QAAC,UAAD,CAAY,IAAZ;AACE,MAAA,OAAO,EAAE,MAAM;AACb,YAAIF,WAAW,GAAG,CAAlB,EAAqBC,YAAY,CAACD,WAAW,GAAG,CAAf,CAAZ;AACtB,OAHH;AAIE,MAAA,QAAQ,EAAEA,WAAW,KAAK;AAJ5B;AAAA;AAAA;AAAA;AAAA,YADF,EAOGS,eAPH,eAQE,QAAC,UAAD,CAAY,IAAZ;AACE,MAAA,OAAO,EAAE,MAAM;AACb,YAAIT,WAAW,GAAGE,UAAlB,EAA8BD,YAAY,CAACD,WAAW,GAAG,CAAf,CAAZ;AAC/B,OAHH;AAIE,MAAA,QAAQ,EAAEA,WAAW,KAAKE;AAJ5B;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CAvED;;GAAML,mB;;KAAAA,mB;AAyEN,eAAeA,mBAAf","sourcesContent":["import { useMemo, useEffect, useState } from 'react';\nimport Pagination from 'react-bootstrap/Pagination';\nimport '../styles/Pagination.css';\n\nconst PaginationComponent = ({\n  total = 0,\n  itemsPerPage = 10,\n  currentPage = 1,\n  onPageChange,\n}) => {\n  const [totalPages, setTotalPages] = useState(0);\n  //    let  [pages, setPages] = useState([]);\n  const set = new Set();\n  const pages = [];\n\n  useEffect(() => {\n    if (total > 0 && itemsPerPage > 0)\n      setTotalPages(Math.ceil(total / itemsPerPage));\n  }, [total, itemsPerPage]);\n\n  /*\n    useEffect(() => {\n        set.clear();\n        const offset = 5;\n            set.add(1);\n            set.add(totalPages);\n    \n            for(let i = 0 ; i < offset; i++) {\n                set.add(Math.min(1 + i, totalPages));\n                set.add(Math.max(currentPage - i, 1));\n                set.add(Math.min(currentPage + i , totalPages));\n                set.add(Math.max(totalPages - i, 1));\n            }\n    \n    \n            pages = Array.from(set).sort((a,b) => a-b);\n            setPages(pages);\n\n    }, [currentPage, totalPages]);*/\n\n  const paginationItems = useMemo(() => {\n    for (let i = 0; i < totalPages; i++) {\n      pages.push(\n        <Pagination.Item\n          key={i}\n          active={i === currentPage}\n          onClick={() => onPageChange(i)}\n        >\n          {i}\n        </Pagination.Item>\n      );\n    }\n\n    return pages;\n  }, [totalPages, currentPage]);\n\n  if (totalPages === 0) return null;\n\n  return (\n    <Pagination>\n      <Pagination.Prev\n        onClick={() => {\n          if (currentPage > 1) onPageChange(currentPage - 1);\n        }}\n        disabled={currentPage === 1}\n      />\n      {paginationItems}\n      <Pagination.Next\n        onClick={() => {\n          if (currentPage < totalPages) onPageChange(currentPage + 1);\n        }}\n        disabled={currentPage === totalPages}\n      />\n    </Pagination>\n  );\n};\n\nexport default PaginationComponent;\n"]},"metadata":{},"sourceType":"module"}