{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\35192\\\\OneDrive\\\\Desktop\\\\feup-sinf\\\\src\\\\components\\\\Sales\\\\SalesBacklogTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useMemo } from 'react';\nimport useFullPageLoader from '../../hooks/FullPageLoader';\nimport PaginationComponent from '../Pagination';\nimport Search from '../Search';\nimport TableHeader from '../TableHeader';\nimport { fetchOngoingSales } from '../../api/sales';\nimport '../../styles/Table.css';\n\nconst SalesBacklogTable = ({\n  numberItemsPerPage,\n  containerStyle,\n  themeColor\n}) => {\n  _s();\n\n  const [loader, showLoader, hideLoader] = useFullPageLoader();\n  const [totalItems, setTotalItems] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [search, setSearch] = useState('');\n  const [sorting, setSorting] = useState({\n    field: '',\n    order: ''\n  });\n  const ITEMS_PER_PAGE = numberItemsPerPage;\n  const headers = [{\n    name: 'Date of order',\n    field: 'date_order',\n    sortable: false\n  }, {\n    name: 'Customer',\n    field: 'customer_name',\n    sortable: true\n  }, {\n    name: 'Items',\n    field: 'items',\n    sortable: true\n  }, {\n    name: 'Total order cost',\n    field: 'total_cost',\n    sortable: false\n  }];\n  /* this is going to be used in the feature when doing the api call */\n\n  const [sales, setSales] = useState([]);\n  /* insert the information fetched in the api (now using a dummy api) */\n\n  useEffect(() => {\n    const getData = () => {\n      showLoader();\n      setSales(fetchOngoingSales());\n      hideLoader();\n    };\n\n    getData();\n  }, []);\n  /*to able to sort the data we are going to retrieve */\n\n  const clientsData = useMemo(() => {\n    let computedSales = sales;\n\n    if (search) {\n      computedSales = computedSales.filter(sale => sale.name.toLowerCase().includes(search.toLowerCase()) || sale.email.toLowerCase().includes(search.toLowerCase()));\n    }\n\n    setTotalItems(computedSales.length); //Sorting sales\n\n    if (sorting.field) {\n      const reversed = sorting.order === 'asc' ? 1 : -1;\n      computedSales = computedSales.sort((a, b) => reversed * a[sorting.field].localeCompare(b[sorting.field]));\n    } //Current Page slice\n\n\n    return computedSales.slice((currentPage - 1) * ITEMS_PER_PAGE, (currentPage - 1) * ITEMS_PER_PAGE + ITEMS_PER_PAGE);\n  }, [sales, currentPage, search, sorting]);\n\n  const getListOfitemsInOrder = items => {\n    var output = []; //Loop over your li's and grab the html content\n\n    items.forEach(item => {\n      output.push(item.number_units + \"x \" + item.name);\n    }); //Set the paragraph value by joining the outputs together \n\n    return output.join(\"\\n\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"table\",\n      style: containerStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"header_info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"table-title\",\n          children: \"Sales Backlog\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Search, {\n          onSearch: value => {\n            setSearch(value);\n            setCurrentPage(1);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(TableHeader, {\n          color: themeColor,\n          headers: headers,\n          onSorting: (field, order) => setSorting({\n            field,\n            order\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: clientsData.map(sale => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"row\",\n              children: sale.date_order\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: sale.customer_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: getListOfitemsInOrder(sale.items)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: sale.total_cost\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this)]\n          }, sale.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PaginationComponent, {\n        color: themeColor,\n        total: totalItems,\n        itemsPerPage: ITEMS_PER_PAGE,\n        currentPage: currentPage,\n        onPageChange: page => setCurrentPage(page)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), loader]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(SalesBacklogTable, \"Mn2BrnYqTx3l7CM2goX4paq6hGo=\", false, function () {\n  return [useFullPageLoader];\n});\n\n_c = SalesBacklogTable;\nexport default SalesBacklogTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"SalesBacklogTable\");","map":{"version":3,"sources":["C:/Users/35192/OneDrive/Desktop/feup-sinf/src/components/Sales/SalesBacklogTable.js"],"names":["React","useEffect","useState","useMemo","useFullPageLoader","PaginationComponent","Search","TableHeader","fetchOngoingSales","SalesBacklogTable","numberItemsPerPage","containerStyle","themeColor","loader","showLoader","hideLoader","totalItems","setTotalItems","currentPage","setCurrentPage","search","setSearch","sorting","setSorting","field","order","ITEMS_PER_PAGE","headers","name","sortable","sales","setSales","getData","clientsData","computedSales","filter","sale","toLowerCase","includes","email","length","reversed","sort","a","b","localeCompare","slice","getListOfitemsInOrder","items","output","forEach","item","push","number_units","join","value","map","date_order","customer_name","total_cost","id","page"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useMemo } from 'react';\nimport useFullPageLoader from '../../hooks/FullPageLoader';\nimport PaginationComponent from '../Pagination';\nimport Search from '../Search';\nimport TableHeader from '../TableHeader';\nimport { fetchOngoingSales } from '../../api/sales';\nimport '../../styles/Table.css';\n\nconst SalesBacklogTable = ({\n  numberItemsPerPage,\n  containerStyle,\n  themeColor,\n}) => {\n  const [loader, showLoader, hideLoader] = useFullPageLoader();\n  const [totalItems, setTotalItems] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [search, setSearch] = useState('');\n  const [sorting, setSorting] = useState({ field: '', order: '' });\n\n  const ITEMS_PER_PAGE = numberItemsPerPage;\n\n  const headers = [\n    { name: 'Date of order', field: 'date_order', sortable: false },\n    { name: 'Customer', field: 'customer_name', sortable: true },\n    { name: 'Items', field: 'items', sortable: true },\n    { name: 'Total order cost', field: 'total_cost', sortable: false },\n  ];\n\n  /* this is going to be used in the feature when doing the api call */\n  const [sales, setSales] = useState([]);\n  /* insert the information fetched in the api (now using a dummy api) */\n  useEffect(() => {\n    const getData = () => {\n      showLoader();\n\n      setSales(fetchOngoingSales());\n\n      hideLoader();\n    };\n\n    getData();\n  }, []);\n\n  /*to able to sort the data we are going to retrieve */\n  const clientsData = useMemo(() => {\n    let computedSales = sales;\n\n    if (search) {\n      computedSales = computedSales.filter(\n        (sale) =>\n          sale.name.toLowerCase().includes(search.toLowerCase()) ||\n          sale.email.toLowerCase().includes(search.toLowerCase())\n      );\n    }\n\n    setTotalItems(computedSales.length);\n\n    //Sorting sales\n    if (sorting.field) {\n      const reversed = sorting.order === 'asc' ? 1 : -1;\n      computedSales = computedSales.sort(\n        (a, b) => reversed * a[sorting.field].localeCompare(b[sorting.field])\n      );\n    }\n\n    //Current Page slice\n    return computedSales.slice(\n      (currentPage - 1) * ITEMS_PER_PAGE,\n      (currentPage - 1) * ITEMS_PER_PAGE + ITEMS_PER_PAGE\n    );\n  }, [sales, currentPage, search, sorting]);\n\n  const getListOfitemsInOrder = (items) => {\n      var output = [];\n\n      //Loop over your li's and grab the html content\n      items.forEach(item => {\n          output.push(item.number_units + \"x \" + item.name);\n      });\n      \n      //Set the paragraph value by joining the outputs together \n      return output.join(\"\\n\");\n  }\n\n  return (\n    <>\n      <section className=\"table\" style={containerStyle}>\n        <header className=\"header_info\">\n          <h3 className=\"table-title\">Sales Backlog</h3>\n          <Search\n            onSearch={(value) => {\n              setSearch(value);\n              setCurrentPage(1);\n            }}\n          />\n        </header>\n\n        <table className=\"content\">\n          <TableHeader\n            color={themeColor}\n            headers={headers}\n            onSorting={(field, order) => setSorting({ field, order })}\n          />\n          <tbody>\n            {clientsData.map((sale) => (\n              <tr key={sale.id}>\n                <th scope=\"row\">{sale.date_order}</th>\n                <td>{sale.customer_name}</td>\n                <td>{getListOfitemsInOrder(sale.items)}</td>\n                <td>{sale.total_cost}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n\n        <PaginationComponent\n          color={themeColor}\n          total={totalItems}\n          itemsPerPage={ITEMS_PER_PAGE}\n          currentPage={currentPage}\n          onPageChange={(page) => setCurrentPage(page)}\n        />\n\n        {loader}\n      </section>\n    </>\n  );\n};\n\nexport default SalesBacklogTable;\n"]},"metadata":{},"sourceType":"module"}